[
  {
      "question": "What are my best-selling items?",
      "answer": {
          "text": "Top 5 items by total sales:",
          "type": "table",
          "code": "df.groupby('item_name')['order_value'].sum().nlargest(5).reset_index()",
          "insight": "{df.groupby('item_name')['order_value'].sum().idxmax()} is the top seller with ${df.groupby('item_name')['order_value'].sum().max():,.2f} revenue"
      }
  },
  {
      "question": "Show me delivery time distribution",
      "answer": {
          "text": "Delivery duration analysis:",
          "type": "visualization",
          "code": "df['delivery_duration'] = (pd.to_datetime(df['delivery_time']) - pd.to_datetime(df['order_time'])).dt.total_seconds()/60\nplt.hist(df['delivery_duration'], bins=20, color='#00B14F')\nplt.title('Delivery Time Distribution')\nplt.xlabel('Minutes')\nplt.ylabel('Order Count')",
          "insight": "Average delivery time: {df['delivery_duration'].mean():.1f} minutes"
      }
  },
  {
      "question": "What's my monthly sales growth?",
      "answer": {
          "text": "Monthly sales performance:",
          "type": "visualization",
          "code": "monthly_sales = df.set_index(pd.to_datetime(df['order_time'])).resample('M')['order_value'].sum()\nmonthly_sales.plot(kind='line', marker='o', figsize=(10,5), color='#00B14F')\nplt.title('Monthly Sales Trend')\nplt.ylabel('Total Sales ($)')",
          "insight": "Peak month: {monthly_sales.idxmax().strftime('%B %Y')} (${monthly_sales.max():,.2f})"
      }
  },
  {
      "question": "Which hours have the most orders?",
      "answer": {
          "text": "Order frequency by hour:",
          "type": "visualization",
          "code": "df['order_hour'] = pd.to_datetime(df['order_time']).dt.hour\nhourly_orders = df['order_hour'].value_counts().sort_index()\nhourly_orders.plot(kind='bar', color='#00B14F', figsize=(10,5))\nplt.title('Orders by Hour of Day')\nplt.xlabel('Hour')\nplt.ylabel('Number of Orders')",
          "insight": "Busiest hour: {hourly_orders.idxmax()}:00 ({hourly_orders.max()} orders)"
      }
  },
  {
      "question": "What's the average order value?",
      "answer": {
          "text": "Order value statistics:",
          "type": "metric",
          "code": "aov = df['order_value'].mean()\nmedian_ov = df['order_value'].median()",
          "insight": "Average order value: ${aov:.2f} | Median: ${median_ov:.2f}"
      }
  },
  {
      "question": "Show me city-wise performance",
      "answer": {
          "text": "Sales distribution across cities:",
          "type": "visualization",
          "code": "city_sales = df.groupby('city_id')['order_value'].sum()\ncity_sales.plot(kind='pie', autopct='%1.1f%%', figsize=(8,8))\nplt.ylabel('')",
          "insight": "Top city: {city_sales.idxmax()} ({city_sales.max()/city_sales.sum():.1%} of total sales)"
      }
  },
  {
      "question": "What's my repeat customer rate?",
      "answer": {
          "text": "Customer loyalty analysis:",
          "type": "metric",
          "code": "repeat_rate = df.groupby('eater_id')['order_id'].nunique().gt(1).mean()",
          "insight": "{repeat_rate:.1%} of customers ordered more than once"
      }
  },
  {
      "question": "Show me item price distribution",
      "answer": {
          "text": "Menu price analysis:",
          "type": "visualization",
          "code": "df['item_price'].plot(kind='box', vert=False, figsize=(8,4), color='#00B14F')\nplt.title('Item Price Distribution')\nplt.xlabel('Price ($)')",
          "insight": "Average price: ${df['item_price'].mean():.2f} | Most common price: ${df['item_price'].mode()[0]}"
      }
  },
  {
      "question": "What's my busiest day of week?",
      "answer": {
          "text": "Orders by weekday:",
          "type": "visualization",
          "code": "df['weekday'] = pd.to_datetime(df['order_time']).dt.day_name()\ndaily_orders = df['weekday'].value_counts()\ndaily_orders.plot(kind='bar', color='#00B14F')\nplt.title('Orders by Weekday')",
          "insight": "Busiest day: {daily_orders.idxmax()} ({daily_orders.max()} orders)"
      }
  },
  {
      "question": "Show me order value distribution",
      "answer": {
          "text": "Order value ranges:",
          "type": "visualization",
          "code": "bins = [0, 20, 50, 100, 500, 1000, 2000]\ndf['order_value'].plot(kind='hist', bins=bins, color='#00B14F')\nplt.title('Order Value Distribution')\nplt.xlabel('Order Value ($)')",
          "insight": "{len(df[df['order_value'] > 500])} large orders (>$500)"
      }
  },
  {
      "question": "What's the average preparation time?",
      "answer": {
          "text": "Kitchen performance metrics:",
          "type": "metric",
          "code": "df['prep_time'] = (pd.to_datetime(df['driver_pickup_time']) - pd.to_datetime(df['order_time'])).dt.total_seconds()/60",
          "insight": "Average prep time: {df['prep_time'].mean():.1f} minutes"
      }
  },
  {
      "question": "Show me customer acquisition trend",
      "answer": {
          "text": "New customers over time:",
          "type": "visualization",
          "code": "df['order_month'] = pd.to_datetime(df['order_time']).dt.to_period('M')\nnew_customers = df.groupby('order_month')['eater_id'].nunique()\nnew_customers.plot(kind='line', marker='o', color='#00B14F')",
          "insight": "Peak acquisition: {new_customers.idxmax().strftime('%b %Y')} ({new_customers.max()} new customers)"
      }
  },
  {
      "question": "What's my sales per cuisine type?",
      "answer": {
          "text": "Cuisine performance:",
          "type": "table",
          "code": "df.groupby('cuisine_tag')['order_value'].sum().sort_values(ascending=False).reset_index()",
          "insight": "{df.groupby('cuisine_tag')['order_value'].sum().idxmax()} accounts for {df.groupby('cuisine_tag')['order_value'].sum().max()/df['order_value'].sum():.1%} of total sales"
      }
  },
  {
      "question": "Show me delivery time vs order value",
      "answer": {
          "text": "Delivery speed analysis:",
          "type": "visualization",
          "code": "df.plot.scatter(x='delivery_duration', y='order_value', alpha=0.5, color='#00B14F')\nplt.title('Delivery Time vs Order Value')\nplt.xlabel('Delivery Minutes')\nplt.ylabel('Order Value ($)')",
          "insight": "Correlation: {df[['delivery_duration','order_value']].corr().iloc[0,1]:.2f}"
      }
  },
  {
      "question": "What's my inventory turnover rate?",
      "answer": {
          "text": "Item popularity analysis:",
          "type": "table",
          "code": "turnover = df.groupby('item_name')['order_id'].count().sort_values(ascending=False).reset_index()",
          "insight": "Most ordered item: {turnover.iloc[0]['item_name']} ({turnover.iloc[0]['order_id']} times)"
      }
  },
  {
      "question": "What's my customer age distribution?",
      "answer": {
          "text": "Customer age demographics:",
          "type": "visualization",
          "code": "df['age_group'] = pd.cut(df['customer_age'], bins=[0,18,25,35,50,65,100], labels=['<18','18-25','26-35','36-50','51-65','65+'])\ndf['age_group'].value_counts().plot(kind='bar', color='#00B14F')\nplt.title('Customer Age Distribution')\nplt.xlabel('Age Group')\nplt.ylabel('Number of Customers')",
          "insight": "Most common age group: {df['age_group'].mode()[0]}"
      }
  },
  {
      "question": "Show me seasonal sales patterns",
      "answer": {
          "text": "Seasonal sales analysis:",
          "type": "visualization",
          "code": "df['season'] = pd.to_datetime(df['order_time']).dt.month.map({12:'Winter',1:'Winter',2:'Winter',3:'Spring',4:'Spring',5:'Spring',6:'Summer',7:'Summer',8:'Summer',9:'Fall',10:'Fall',11:'Fall'})\nseasonal_sales = df.groupby('season')['order_value'].sum()\nseasonal_sales.plot(kind='bar', color='#00B14F')\nplt.title('Sales by Season')",
          "insight": "Peak season: {seasonal_sales.idxmax()} (${seasonal_sales.max():,.2f})"
      }
  },
  {
      "question": "What's my profit margin by item?",
      "answer": {
          "text": "Item profitability analysis:",
          "type": "table",
          "code": "df['profit_margin'] = (df['item_price'] - df['item_cost']) / df['item_price'] * 100\nitem_margins = df.groupby('item_name')[['profit_margin']].mean().sort_values('profit_margin', ascending=False).reset_index()",
          "insight": "Most profitable item: {item_margins.iloc[0]['item_name']} ({item_margins.iloc[0]['profit_margin']:.1f}% margin)"
      }
  },
  {
      "question": "What's my order cancellation rate?",
      "answer": {
          "text": "Order cancellation analysis:",
          "type": "metric",
          "code": "cancellation_rate = len(df[df['order_status']=='cancelled'])/len(df)\ncancellation_reasons = df[df['order_status']=='cancelled']['cancellation_reason'].value_counts()",
          "insight": "Cancellation rate: {cancellation_rate:.1%}, Main reason: {cancellation_reasons.index[0]}"
      }
  },
  {
      "question": "Show me customer spending patterns",
      "answer": {
          "text": "Customer spending analysis:",
          "type": "visualization",
          "code": "customer_spending = df.groupby('eater_id')['order_value'].sum().reset_index()\nplt.hist(customer_spending['order_value'], bins=30, color='#00B14F')\nplt.title('Customer Lifetime Value Distribution')\nplt.xlabel('Total Spending ($)')\nplt.ylabel('Number of Customers')",
          "insight": "Average customer lifetime value: ${customer_spending['order_value'].mean():,.2f}"
      }
  },
  {
      "question": "What's my average rating over time?",
      "answer": {
          "text": "Customer satisfaction trend:",
          "type": "visualization",
          "code": "monthly_ratings = df.set_index(pd.to_datetime(df['order_time'])).resample('M')['rating'].mean()\nmonthly_ratings.plot(kind='line', marker='o', color='#00B14F')\nplt.title('Average Monthly Ratings')\nplt.ylabel('Rating (1-5)')",
          "insight": "Overall rating: {df['rating'].mean():.1f}/5.0"
      }
  },
  {
      "question": "What payment methods do customers prefer?",
      "answer": {
          "text": "Payment method analysis:",
          "type": "visualization",
          "code": "payment_dist = df['payment_method'].value_counts()\npayment_dist.plot(kind='pie', autopct='%1.1f%%')\nplt.title('Payment Method Distribution')",
          "insight": "Most popular: {payment_dist.index[0]} ({payment_dist.iloc[0]/len(df):.1%})"
      }
  },
  {
      "question": "How many new vs returning customers per month?",
      "answer": {
          "text": "Customer retention analysis:",
          "type": "visualization",
          "code": "df['customer_type'] = df.groupby('eater_id').cumcount().map(lambda x: 'New' if x==0 else 'Returning')\nmonthly_breakdown = df.pivot_table(index=pd.to_datetime(df['order_time']).dt.to_period('M'), columns='customer_type', values='order_id', aggfunc='count')\nmonthly_breakdown.plot(kind='bar', stacked=True)",
          "insight": "Retention rate: {len(df[df['customer_type']=='Returning'])/len(df[df['customer_type']=='New']):.1%}"
      }
  },
  {
      "question": "What's my average order processing time by day of week?",
      "answer": {
          "text": "Processing efficiency analysis:",
          "type": "visualization",
          "code": "df['processing_time'] = (pd.to_datetime(df['ready_time']) - pd.to_datetime(df['order_time'])).dt.total_seconds()/60\nprocessing_by_day = df.groupby('weekday')['processing_time'].mean().reindex(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nprocessing_by_day.plot(kind='bar')\nplt.title('Average Processing Time by Day')\nplt.ylabel('Minutes')",
          "insight": "Slowest day: {processing_by_day.idxmax()} ({processing_by_day.max():.1f} min)"
      }
  },
  {
      "question": "What items are often ordered together?",
      "answer": {
          "text": "Item combination analysis:",
          "type": "table",
          "code": "from itertools import combinations\norder_items = df.groupby('order_id')['item_name'].agg(list)\nitem_pairs = [tuple(sorted(combo)) for items in order_items for combo in combinations(items, 2)]\npair_counts = pd.Series(item_pairs).value_counts().head(10)",
          "insight": "Most common pair: {pair_counts.index[0][0]} & {pair_counts.index[0][1]} ({pair_counts.iloc[0]} times)"
      }
  }
  
]